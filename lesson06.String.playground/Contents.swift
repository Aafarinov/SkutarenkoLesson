// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -     STRING      -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
// Строка это СТРУКТУРА!!! / CТЕКИ  / VALUE TYPE / ТИП "ЗНАЧЕНИЕ"
// Передается КОПИРОВАНИЕМ
// не поддерживают наследование
//Если создается строка "var" - она MUTABLE - т.е. ее можно изменять


// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

//                                                      Cкутаренко - теория

/*

//строку можно никак не инициализировать:
var str = "c"
str = str + "a"
str += "b"

// пример копирования. Изначально у нас строка 1 равна "a", при этом строка 2 равна первой строке.
var str1 = "a"
var str2 = str1

str1
str2

str1 = "b"

str1
str2

// поменяли значение в первой строке, а во второй оно осталось прежнее!!!

//проверка строки на наличие инфы в ней
str1.isEmpty


 
 //                                                        character & symbols

 
 let char1 = "x"
// по умолчанию будет всегда стрка! Если мы хотим, чтобы был "character" - нужно ЯВНО указать его в анотации
let char2 : Character = "y"
// если я попробую из "y" сделать "ya" (добавлю хоть один символ) - будет страшно ругаться!


// распечатываем вертикально по 1 букве - 12 раз!! (по колличеству символов)
for c in "Hello world!" {
    print(c)
}


// мы не можем к строке добавлять character! К строке можем добавлять только строки(не можем складывать крокодилы с трамвайными остановками)
var str3 = "yo"
let char3 = "u"
// преобразовываем строку в "character" с помощью метода "append"
str3.append(char3)


//                                                           UNICODE SYMBOLS!!!

 // на глубоком-преглубоком уровне - каждый символ это набор чисел!!!
// каждый юникод значение это 21 битное число (один символ)!!!
// юникод - это определенный формат - стандарт представления символов

let heart = "\u{1f496}"
var fan : Character = "Ъ"
let combinedEAcute: Character = "e\u{301}"
var fun : Character = "Ъ\u{301}"
// а потом можно это обернуть в кружочек
fun = "Ъ\u{301}\u{20dd}"
//fun = "Ъ\u{20dd}\u{301}"


//                                                функция подсчитать колличество элементов

 let funString = "what is this? -> \(fun)"
funString
funString.count


//                                                           сравнение строк
if funString == "aa" {
    
} else {
    print("not equal")
}


//                                                           суфиксы / префиксы
funString.hasPrefix("what")
funString.hasSuffix("Ъ")
funString.hasSuffix("Ъ\u{301}\u{20dd}") // то что сверху мы писали
funString.hasSuffix("Ъ\u{301}") // убрали последнюю часть и уже такого суффикса нет
funString.hasSuffix("Ъ\u{20dd}\u{301}") // у Скутаренко это true, у меня это false




*/

// -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

 //                                                       Акулов - теория
// По теории Акулов рассказывал только про интерполяцию строки





//---------------------------------------------------------------------------------------------------------------------------------

//                                                     ТЕХНИЧЕСКОЕ ЗАДАНИЕ

/*
1. Создать пять любых констант из предыдущих уроков
только вместо forced unwrapping и optional binding используйте оператор ??

Когда посчитаете сумму, то представьте свое выражение в виде строки
Например: 5 + nil + 2 + 3 + nil = 10

но в первом случае используйте интерполяцию строк, а во втором конкатенацию

2. Поиграйтесь с юникодом и создайте строку из 5 самых классных по вашему мнению символов,
можно использовать составные символы. Посчитайте длину строки методом SWIFT и Obj-C

3. Создайте строку английский алфавит, все буквы малые от a до z

задайте константу - один из символов этого алфавита

Используя цикл for определите под каким индексов в строке находится этот символ

*/
 //---------------------------------------------------------------------------------------------------------------------------------
 

 //                                                     ВЫПОЛНЕНИЕ ЗАДАНИЯ
/*
 
 1. Создать пять любых констант из предыдущих уроков
 только вместо forced unwrapping и optional binding используйте оператор ??

 //                                                  оператор заменяющий nil ??
 /*
 мы хотим создать константу (myName) и присвоить ей значение (name), если оно есть, если значения нет, то присваивается имя по умолчанию (defaultName). (похожая ситуация в Храме с именем)
 
 В первом случае у нас нет запасного имени. (nil) у нас присваивается defaultName.
 во втором случае - запасное имя "Иаков" - оно будет вместо nil
 
 
 let defaultName = "Adam"
 var name: String? = nil
 
 var myName = name ?? defaultName
 // -   -   -   -   -   -   -   -   -   -   -   -
 
 let defaultName2 = "Adam"
 var name2: String? = "Jacob"
 
 let myName2 = name2 ?? defaultName2
 //var myName2 = defaultName2 ?? name2
 
 // -   -   -   -   -   -   -   -   -   -   -   -
 
 //                                                       пример из ютуба
 var n: Int? = nil
 
 // if n != nil {
 //    print(n!)
 // } else {
 //    print(5)
 // }
 //
 print(n ?? 5)
 
 //                                                 пример из документации свифта
 
 
 let a = "red"
 var b: String?
 
 var c = b ?? a
 print(c)
 b = "green"
 c = b ?? a
 print(b ?? a)
 
 */

 
 
 
 Когда посчитаете сумму, то представьте свое выражение в виде строки
 Например: 5 + nil + 2 + 3 + nil = 10
 
 но в первом случае используйте интерполяцию строк, а во втором конкатенацию
 
 // конкатанация строк! (String concatenation) Мы можем только складывать строки (не вычетать, не делить!) на 14 минуте
 let str = "Hi, " + "there!"
 
 
// -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
*/



/*

let const01 = 5                             // исходные данные
let altConst01 : Int? = nil                 // вводим вторую переменную. Определяем ее как Int Optional и проверяем на nil
var const001 = Int(const01)                 // вводим третью переменную. Приведим исходные данные Sting to Int
var myConst01 = altConst01 ?? const001      // вводим четвертую переменную. Применение оператора заменяющего nil ??
print(myConst01)                     // Print  БЕЗ КОВЫЧЕК!! (иначе жопа полная)


let const02 = "Nick"
var altConst02 : Int? = nil
var const002 = Int(const02)
var myConst02 = altConst02 ?? const002
//print(myConst02 as Any)


let const03 = "2.314"
var altConst03 : Int? = nil
var const003 = Int(const03)
var myConst03 = altConst03 ?? const003
//print(myConst03 as Any)


let const04 = 3.5
var altConst04 : Int? = nil
var const004 = Int(const04)
var myConst04 = altConst04 ?? const004
var myConst004 = Int(myConst04)


let const05 = "Efil-65"
var altConst05 : Int? = nil
var altConst005 = Int(const05)
var myConst05 = altConst05 ?? altConst05

 
 
var sum =  myConst01 + Int(myConst02!) + myConst03 + myConst04 + Int(myConst05!)
//print("\(myConst01)+\(myConst02!)+\(myConst03)+\(myConst04)+\(myConst05!)=\("sum")")

//print("5, " + "Nick, " + "2.314, " + "3.5, " + "Efil-65")

 */
 
//                                                 оператор заменяющий nil ??
/*
 мы хотим создать константу (myName) и присвоить ей значение (name), если оно есть, если значения нет, то присваивается имя по умолчанию (defaultName). (похожая ситуация в Храме с именем)
 
 В первом случае у нас нет запасного имени. (nil) у нас присваивается defaultName.
 во втором случае - запасное имя "Иаков" - оно будет вместо nil
 

let defaultName = "Adam"
var name: String? = nil

var myName = name ?? defaultName
// -   -   -   -   -   -   -   -   -   -   -   -

let defaultName2 = "Adam"
var name2: String? = "Jacob"

let myName2 = name2 ?? defaultName2
//var myName2 = defaultName2 ?? name2

// -   -   -   -   -   -   -   -   -   -   -   -

//                                                       пример из ютуба
var n: Int? = nil

// if n != nil {
//    print(n!)
// } else {
//    print(5)
// }
//
print(n ?? 5)

//                                                 пример из документации свифта


let a = "red"
var b: String?

var c = b ?? a
print(c)
b = "green"
c = b ?? a
print(b ?? a)

*/







// -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

/*
2. Поиграйтесь с юникодом и создайте строку из 5 самых классных по вашему мнению символов,
можно использовать составные символы. Посчитайте длину строки методом SWIFT и Obj-C
 
 https://apps.timwhitlock.info/emoji/tables/unicode
 https://unicode-table.com/en/1F4F3/

 // на ютубе спрашивал кто-то: Подскажите пожалуйста а как можно вывести символы юникода в цикле? Не могу понять сам синтаксис, как переменную цикла добавлять к некому стартовому коду юникода и что бы сам символ выводился в консоль.
 
 Скутаренко отвечал: можно выбрать диапазон от нуля и до макс юникода (max 21 bit = 0x1FFFFF), потом в цикле создавать UnicodeScalar (это тип такой и у него есть конструктор для Int32), а из него можно создать Character (у него есть конструктор scalar)
 
 // -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

//                                                    UNICODE SYMBOLS!!!

// на глубоком-преглубоком уровне - каждый символ это набор чисел!!!
// каждый юникод значение это 21 битное число (один символ)!!!
// юникод - это определенный формат - стандарт представления символов

let heart = "\u{1f496}"
var fan : Character = "Ъ"
let combinedEAcute: Character = "e\u{301}"
var fun : Character = "Ъ\u{301}"
// а потом можно это обернуть в кружочек
fun = "Ъ\u{301}\u{20dd}"
//fun = "Ъ\u{20dd}\u{301}"

let heart2 = "\u{1F4A5}\u{20dd}\u{301}"
let explosion = "\u{1F4A5}\u{24C2}"



print("\u{0298}     \u{058D}       \u{0bf8}\u{301}    \u{260e}   \u{00dB}     \u{1F4F3} \u{0482}\u{20dd}\u{301}   \u{2728}\u{2729}\u{2730}")
print("\u{1908}\u{20dd}       \t\t\u{2723}     \u{2724}\t\u{2725}\u{2726}\u{2728}\u{2729}\u{2730}")

print(" \u{2724}\u{20de}\u{20dd}     \u{2726}\u{2728}\u{2729}\u{2730}")
let fun1 = "\u{0482}\u{20dd}\u{301}"
let funString1 = "What's that? ->\(fun1)"
funString1.count
*/
 
 // -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

 /*
 3. Создайте строку английский алфавит, все буквы малые от a до z
 задайте константу - один из символов этого алфавита
 
 Используя цикл for определите под каким индексов в строке находится этот символ

 */

let alphabet = "abcdefghijklmnopqrstuvwxyz"
let search : Character = "e"
var index = 0
for char in alphabet {
    if search == char {
        print("index = \(index)")
    }
    
}

 // -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
 
 
 
 // -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -







